<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" 
    xmlns="http://www.mulesoft.org/schema/mule/core" 
    xmlns:apikit="http://www.mulesoft.org/schema/mule/mule-apikit" 
    xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" 
    xmlns:http="http://www.mulesoft.org/schema/mule/http" 
    xmlns:db="http://www.mulesoft.org/schema/mule/db" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="
        http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
        http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
        http://www.mulesoft.org/schema/mule/mule-apikit http://www.mulesoft.org/schema/mule/mule-apikit/current/mule-apikit.xsd
        http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
        http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd">

    <http:listener-config name="user-api-httpListenerConfig">
        <http:listener-connection host="0.0.0.0" port="8081" />
    </http:listener-config>

    <apikit:config name="user-api-config" api="user-api.raml" outboundHeadersMapName="outboundHeaders" httpStatusVarName="httpStatus" />
    
    <db:config name="Database_Config" doc:name="Database Config" doc:id="7f5207f9-3f02-4b52-be01-4a64c25fd58b" >
		<db:my-sql-connection host="localhost" port="3306" user="root" password="Pa55word" database="userdb" />
	</db:config>

	<flow name="user-api-main">
        <http:listener config-ref="user-api-httpListenerConfig" path="/api/*">
            <http:response statusCode="#[vars.httpStatus default 200]">
                <http:headers>#[vars.outboundHeaders default {}]</http:headers>
            </http:response>
            <http:error-response statusCode="#[vars.httpStatus default 500]">
                <http:body>#[payload]</http:body>
                <http:headers>#[vars.outboundHeaders default {}]</http:headers>
            </http:error-response>
        </http:listener>
        <apikit:router config-ref="user-api-config" />
        <error-handler>
            <on-error-propagate type="APIKIT:BAD_REQUEST">
                <ee:transform>
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Bad request"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">400</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:NOT_FOUND">
                <ee:transform>
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Resource not found"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">404</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:METHOD_NOT_ALLOWED">
                <ee:transform>
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Method not allowed"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">405</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:UNSUPPORTED_MEDIA_TYPE">
                <ee:transform>
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Unsupported media type"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">415</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
        </error-handler>
    </flow>

    <flow name="get:\users:user-api-config">
        <logger level="INFO" doc:name="Logger" doc:id="6b003b6b-c1fe-4ad4-909e-35c1f0ed3f17" message="${app.home}/input.csv"/>
		<db:select doc:name="Select All Users" config-ref="Database_Config">
            <db:sql><![CDATA[SELECT * FROM User]]></db:sql>
        </db:select>
        <ee:transform doc:name="Transform to JSON">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
            </ee:message>
        </ee:transform>
        <logger level="INFO" message="Retrieved all users" />
    </flow>

    <flow name="get:\users\(id):user-api-config">
		<ee:transform doc:name="Extract URI Params">
            <ee:variables>
                <ee:set-variable variableName="id" ><![CDATA[attributes.uriParams.id]]></ee:set-variable>
            </ee:variables>
        </ee:transform>
        <db:select doc:name="Select User by ID" config-ref="Database_Config">
            <db:sql><![CDATA[SELECT * FROM User WHERE id = :id]]></db:sql>
            <db:input-parameters><![CDATA[#[{'id': vars.id}]]]></db:input-parameters>
        </db:select>
        <ee:transform doc:name="Transform to JSON">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload[0]]]></ee:set-payload>
            </ee:message>
        </ee:transform>
        <logger level="INFO" message="Retrieved user with ID: #[vars.id]" />
    </flow>

    <flow name="post:\users:application\json:user-api-config">
        <db:insert doc:name="Insert New User" config-ref="Database_Config">
            <db:sql><![CDATA[INSERT INTO User (nome, cognome, mail, indirizzo) VALUES (:nome, :cognome, :mail, :indirizzo)]]></db:sql>
            <db:input-parameters><![CDATA[
                #[{
                    'nome': payload.nome,
                    'cognome': payload.cognome,
                    'mail': payload.mail,
                    'indirizzo': payload.indirizzo
                }]
            ]]></db:input-parameters>
        </db:insert>
        <set-payload value="{'message': 'User created successfully'}" doc:name="Set Response Payload" />
        <logger level="INFO" message="Created a new user: #[payload]" />
    </flow>

    <!-- Update User by ID Flow -->
    <flow name="put:\users\(id):application\json:user-api-config">
        <ee:transform doc:name="Extract URI Params">
            <ee:variables>
                <ee:set-variable variableName="id"  ><![CDATA[attributes.uriParams.id]]></ee:set-variable>
            </ee:variables>
        </ee:transform>
        <db:update doc:name="Update User by ID" config-ref="Database_Config">
            <db:sql><![CDATA[
                    UPDATE User
                    SET nome = :nome, cognome = :cognome, mail = :mail, indirizzo = :indirizzo
                    WHERE id = :id
                ]]>
            </db:sql>
            <db:input-parameters><![CDATA[
                #[{
                    'id': vars.id,
                    'nome': payload.nome,
                    'cognome': payload.cognome,
                    'mail': payload.mail,
                    'indirizzo': payload.indirizzo
                }]
            ]]></db:input-parameters>
        </db:update>
        <set-payload value="{'message': 'User updated successfully'}" doc:name="Set Response Payload" />
        <logger level="INFO" message="Updated user with ID: #[vars.id]" />
    </flow>

    <flow name="delete:\users\(id):user-api-config">
        <ee:transform doc:name="Extract URI Params">
            <ee:variables>
                <ee:set-variable variableName="id" ><![CDATA[attributes.uriParams.id]]></ee:set-variable>
            </ee:variables>
        </ee:transform>
        <db:delete doc:name="Delete User by ID" config-ref="Database_Config">
            <db:sql><![CDATA[DELETE FROM User WHERE id = :id]]></db:sql>
            <db:input-parameters><![CDATA[#[{'id': vars.id}]]]></db:input-parameters>
        </db:delete>
        <set-payload value="{'message': 'User deleted successfully'}" doc:name="Set Response Payload" />
        <logger level="INFO" message="Deleted user with ID: #[vars.id]" />
    </flow>

<flow name="patch:\users\(id):application\json:user-api-config">
    <ee:transform doc:name="Extract URI Params">
        <ee:variables>
            <ee:set-variable variableName="id"><![CDATA[attributes.uriParams.id]]></ee:set-variable>
        </ee:variables>
    </ee:transform>
    <db:update doc:name="Patch User by ID" config-ref="Database_Config">
        <db:sql><![CDATA[
                UPDATE User
                SET nome = COALESCE(:nome, nome),
                    cognome = COALESCE(:cognome, cognome),
                    mail = COALESCE(:mail, mail),
                    indirizzo = COALESCE(:indirizzo, indirizzo)
                WHERE id = :id
            ]]>
        </db:sql>
        <db:input-parameters><![CDATA[
            #[{
                'id': vars.id,
                'nome': payload.nome,
                'cognome': payload.cognome,
                'mail': payload.mail,
                'indirizzo': payload.indirizzo
            }]
        ]]></db:input-parameters>
    </db:update>
    <set-payload value="{'message': 'User updated successfully'}" doc:name="Set Response Payload" />
    <logger level="INFO" message="Partially updated user with ID: #[vars.id]" />
</flow>

<flow name="get:\users\search:application\json:user-api-config">
		<choice doc:name="Choice" doc:id="c00c6c3b-bd55-4a9f-9874-be2ae3036456" >
			<when expression="#[attributes.queryParams.nome != null or attributes.queryParams.cognome != null]">
				<db:select doc:name="Search Users" config-ref="Database_Config">
        <db:sql><![CDATA[SELECT * FROM User
           WHERE (:nome IS NULL OR nome LIKE '%' || :nome || '%')
           AND (:cognome IS NULL OR cognome LIKE '%' || :cognome || '%')]]>
        </db:sql>
        <db:input-parameters><![CDATA[#[%dw 2.0
output application/json
---
{
    'nome': if (attributes.queryParams.nome != null and attributes.queryParams.nome != '') 
            attributes.queryParams.nome 
            else null,
    'cognome': if (attributes.queryParams.cognome != null and attributes.queryParams.cognome != '') 
               attributes.queryParams.cognome 
               else null
}]]]></db:input-parameters>
    </db:select>
				<ee:transform doc:name="Transform to JSON">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
            </ee:message>
        </ee:transform>
				<logger level="INFO" message="Searched users with query: #[attributes.queryParams]" />
			</when>
		                <otherwise>
            <set-payload value="Almeno uno tra 'nome' o 'cognome' deve essere fornito" />
            <set-variable variableName="httpStatus" value="400" />
        </otherwise>
		</choice>
</flow>

    <flow name="user-api-console">
        <http:listener config-ref="user-api-httpListenerConfig" path="/console/*">
            <http:response statusCode="#[vars.httpStatus default 200]">
                <http:headers>#[vars.outboundHeaders default {}]</http:headers>
            </http:response>
            <http:error-response statusCode="#[vars.httpStatus default 500]">
                <http:body>#[payload]</http:body>
                <http:headers>#[vars.outboundHeaders default {}]</http:headers>
            </http:error-response>
        </http:listener>
        <apikit:console config-ref="user-api-config" />
    </flow>
</mule>
